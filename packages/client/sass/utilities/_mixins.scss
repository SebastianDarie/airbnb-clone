$breakpoints: (
  //  'small'  : ( max-width:  20em ),
  'mobile': screen and
    (
      min-width: (
        375px,
      ),
    ),
  'tablet': screen and
    (
      min-width: (
        768px,
      ),
    ),
  'desktop': screen and
    (
      min-width: (
        950px,
      ),
    ),
  //  'wide'    : ( min-width: 75em ),
  //  'height'    : ( min-width: 75em ) and (min-height: 62.5em)
);

@mixin media($name) {
  @if map-has-key($breakpoints, $name) {
    $value: map-get($breakpoints, $name);
    $query: if(type-of($value) == 'string', $value, inspect($value));
    @media #{$query} {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin fade-mixin {
  @keyframes fade-in {
    0% {
      opacity: 0;
      transform: translate(0, 40%);
    }

    100% {
      opacity: 1;
      transform: none;
    }
  }
}

@mixin dot-mixin {
  @keyframes dot-loading {
    0%,
    80%,
    100% {
      opacity: 0;
    }
    30%,
    50% {
      opacity: 1;
    }
  }
}

@mixin opacity-mixin {
  @keyframes opacity-appear {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }
}

@mixin skeleton-mixin {
  @keyframes skeleton-loading {
    0% {
      opacity: 0.09049773755656108;
    }

    100% {
      opacity: 0.15384615384615385;
    }
  }
}

@mixin cover-mixin {
  @keyframes cover-opacity {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 0.15;
    }
  }
}

@mixin stripe-fade {
  @keyframes fade {
    from {
      opacity: 0;
      transform: scale3D(0.95, 0.95, 0.95);
    }
    to {
      opacity: 1;
      transform: scale3D(1, 1, 1);
    }
  }
}

@mixin stripe-void {
  @keyframes void-animation-out {
    0%,
    to {
      opacity: 1;
    }
  }
}
