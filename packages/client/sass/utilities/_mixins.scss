@use 'sass:math';

@mixin media($name) {
  @if map-has-key($breakpoints, $name) {
    $value: map-get($breakpoints, $name);
    $query: if(type-of($value) == 'string', $value, inspect($value));
    @media #{$query} {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin fade-mixin {
  @keyframes fade-in {
    0% {
      opacity: 0;
      transform: translate(0, 40%);
    }

    100% {
      opacity: 1;
      transform: none;
    }
  }
}

@mixin dot-mixin {
  @keyframes dot-loading {
    0%,
    80%,
    100% {
      opacity: 0;
    }
    30%,
    50% {
      opacity: 1;
    }
  }
}

@mixin opacity-mixin {
  @keyframes opacity-appear {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }
}

@mixin skeleton-mixin {
  @keyframes skeleton-loading {
    0% {
      opacity: 0.09049773755656108;
    }

    100% {
      opacity: 0.15384615384615385;
    }
  }
}

@mixin cover-mixin {
  @keyframes cover-opacity {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 0.15;
    }
  }
}

@mixin stripe-fade {
  @keyframes fade {
    from {
      opacity: 0;
      transform: scale3D(0.95, 0.95, 0.95);
    }
    to {
      opacity: 1;
      transform: scale3D(1, 1, 1);
    }
  }
}

@mixin stripe-void {
  @keyframes void-animation-out {
    0%,
    to {
      opacity: 1;
    }
  }
}

@mixin stripe-processing {
  @keyframes loading {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
}

@mixin stripe-circle {
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(1turn);
    }
  }
}

@mixin btn-border-drawing(
  $color: #ccc,
  $hover: black,
  $width: 2px,
  $vertical: top,
  $horizontal: left,
  $duration: 0.25s
) {
  box-shadow: inset 0 0 0 $width $color;
  color: $color;
  transition: color $duration math.div($duration, 3);
  position: relative;

  &::before,
  &::after {
    border: 0 solid transparent;
    box-sizing: border-box;
    content: '';
    pointer-events: none;
    position: absolute;
    width: 0;
    height: 0;

    #{$vertical}: 0;
    #{$horizontal}: 0;
  }

  &::before {
    $h-side: if($horizontal == 'left', 'right', 'left');

    border-#{$vertical}-width: $width;
    border-#{$h-side}-width: $width;
  }

  &::after {
    $v-side: if($vertical == 'top', 'bottom', 'top');

    border-#{$v-side}-width: $width;
    border-#{$horizontal}-width: $width;
  }

  &:hover {
    color: $hover;

    &::before,
    &::after {
      border-color: $hover;
      transition: border-color 0s, width $duration, height $duration;
      width: 100%;
      height: 100%;
    }

    &::before {
      transition-delay: 0s, 0s, $duration;
    }

    &::after {
      transition-delay: 0s, $duration, 0s;
    }
  }
}

@mixin search-mixin {
  @keyframes search-loading {
    0%,
    80%,
    100% {
      transform: scale(0);
    }
    30%,
    50% {
      transform: scale(1);
    }
  }
}
